/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eleccioncoordinador1algo;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ark
 */
public class PantallaEC extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form PantallaEC
     */
    
    Proceso procesoHilo, vecino;
    //String [] mensaje;
    Thread hilo;
    public PantallaEC() {
        initComponents();
        //mensaje = new String[4];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPuerto = new javax.swing.JTextField();
        btnIniciar = new javax.swing.JButton();
        btnAsignar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMensajesA = new javax.swing.JTextArea();
        btnPeticion = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtPuertoProceso = new javax.swing.JTextField();
        cbxProcesoRango = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Direccion");

        jLabel2.setText("Puerto");

        btnIniciar.setText("Iniciar Proceso");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        btnAsignar.setText("Asignar Vecino");
        btnAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignarActionPerformed(evt);
            }
        });

        txtMensajesA.setColumns(20);
        txtMensajesA.setRows(5);
        jScrollPane1.setViewportView(txtMensajesA);

        btnPeticion.setText("Mandar peticion");
        btnPeticion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPeticionActionPerformed(evt);
            }
        });

        jLabel3.setText("Puerto Proceso");

        cbxProcesoRango.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));

        jLabel4.setText("Proceso");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAsignar)
                            .addComponent(btnPeticion)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnIniciar)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(169, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPuertoProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbxProcesoRango, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPuertoProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxProcesoRango, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(btnIniciar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(btnAsignar)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPeticion)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        // TODO add your handling code here:
        int puertoProc = Integer.parseInt(txtPuertoProceso.getText());
        procesoHilo= new Proceso(cbxProcesoRango.getSelectedIndex()+1, puertoProc, "localhost",1);
        hilo = new Thread(this);
        hilo.start();
        txtPuertoProceso.setEnabled(false);
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignarActionPerformed
        // TODO add your handling code here:
        vecino = new Proceso(15, Integer.parseInt(txtPuerto.getText()), txtDireccion.getText());
        txtDireccion.setEnabled(false);
        txtPuerto.setEnabled(false);
    }//GEN-LAST:event_btnAsignarActionPerformed

    private void btnPeticionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPeticionActionPerformed
        
        //notify();
        enviarMensaje(1,null);
        procesoHilo.setEstado(2);
    }//GEN-LAST:event_btnPeticionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaEC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaEC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaEC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaEC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaEC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAsignar;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnPeticion;
    private javax.swing.JComboBox<String> cbxProcesoRango;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextArea txtMensajesA;
    private javax.swing.JTextField txtPuerto;
    private javax.swing.JTextField txtPuertoProceso;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        
        try {
            int puertoRecepcion = procesoHilo.getPuerto();
            //DatagramSocket aSocket = new DatagramSocket(6789);
            DatagramSocket aSocket = new DatagramSocket(puertoRecepcion);
            //vector del objeto entrante
            byte[] incoming = new byte[1024];
            while (true) {
                // se recibe el  datagrama del objeto
                DatagramPacket incomingPackte = new DatagramPacket(incoming, incoming.length);
                aSocket.receive(incomingPackte);
//                DatagramPacket request = new DatagramPacket(buffer, buffer.length);
//                aSocket.receive(request);
//se combierte el mensaje recibido a bytes
                byte[] data = incomingPackte.getData();
//objetos para obtener el objeto en el mensaje
                ByteArrayInputStream in = new ByteArrayInputStream(data);
                ObjectInputStream is = new ObjectInputStream(in);
                Mensaje mensaje;
                mensaje = (Mensaje) is.readObject();
                txtMensajesA.append(mensaje.toString()+"\n");
                if(mensaje.getTipo()==1){
                    if(procesoHilo.getEstado()==1){
                        if(mensaje.getVariable()<procesoHilo.getId()){
                          enviarMensaje(1,null);
                          procesoHilo.setEstado(2);
                        }else{
                            enviarMensaje(2, mensaje);
                            procesoHilo.setEstado(2);
                        }
                    }else if(procesoHilo.getEstado()==2){
                        if(mensaje.getVariable()>procesoHilo.getId()){
                          enviarMensaje(2,mensaje);
                          //
                        }else if(mensaje.getVariable()==procesoHilo.getId()){
                            enviarMensaje(3, null);
                            procesoHilo.setEstado(1);
                            procesoHilo.setCoordinador(Integer.toString(mensaje.getVariable()));
                            txtMensajesA.append("Coordinador: "+Integer.toString(mensaje.getVariable())+"\n");
                        }
                    }
                    
                }else if(mensaje.getTipo()==2){
                    if(procesoHilo.getEstado()==2){
                        enviarMensaje(2,mensaje);
                        procesoHilo.setEstado(1);
                        procesoHilo.setCoordinador(Integer.toString(mensaje.getVariable()));
                        txtMensajesA.append("Coordinador: "+Integer.toString(mensaje.getVariable())+"\n");
                    }
                }
            }
        } catch (SocketException e) {
            System.out.println("Socket: " + e.getMessage());
        } catch (IOException ex) {
            System.out.println("IO: " + ex.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PantallaEC.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void enviarMensaje(int tipoMensaje, Mensaje envio) {
        
        try {
            DatagramSocket aSocket = new DatagramSocket();
            //List<Tuplas> ci = new ArrayList<Tuplas>();
            Mensaje me=null;
            if(tipoMensaje==1){
                me = new Mensaje(1, 1, procesoHilo.getId());
            }else if (tipoMensaje==2){
                me = envio;
            }else if(tipoMensaje==3){
                me = new Mensaje(1, 2, procesoHilo.getId());
            }
            

            //Proceso Seleccionado
            System.out.println("Mensaje envia: " + me);

            byte[] incoming = new byte[1024];
            // se ocupa los 2 elementos para poder mandar la clase
            ByteArrayOutputStream outputstream = new ByteArrayOutputStream();
            ObjectOutputStream os = new ObjectOutputStream(outputstream);
            os.writeObject(me);
            //se parsea el objeto a bytes para mandarlo
            byte[] data = outputstream.toByteArray();
            //byte [] m = cad.getBytes();
            //InetAddress aHost = InetAddress.getByName("localhost");
            InetAddress aHost = InetAddress.getByName(vecino.getDireccion());
            //int serverPort = 6789;
//            int serverPort=Integer.parseInt(txtPuertoEnvio.getText());
            int serverPort = vecino.getPuerto();
//envio del objecto
            DatagramPacket sendPacket = new DatagramPacket(data, data.length, aHost, serverPort);

//DatagramPacket request = new DatagramPacket(m,cad.length(),
//        aHost,serverPort);
            try {
                // TODO add your handling code here:
                Thread.sleep(4000);
            } catch (InterruptedException ex) {
                Logger.getLogger(PantallaEC.class.getName()).log(Level.SEVERE, null, ex);
            }
            aSocket.send(sendPacket);
        } catch (SocketException ex) {
            Logger.getLogger(PantallaEC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PantallaEC.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
